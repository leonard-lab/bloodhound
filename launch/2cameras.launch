<launch>
  	<!-- Camera 1 Settings -->
  	<arg name="camera_name1" default="camera1" />
  	<!-- video_stream_provider can be a number as a video device or a url of a video stream -->
  	<arg name="video_stream_provider1" default="0" />
  	<!-- frames per second to query the camera for -->
  	<arg name="fps1" default="30" />
  	<!-- frame_id for the camera -->
  	<arg name="frame_id1" default="$(arg camera_name1)" />
  	<!-- By default, calibrations are stored to file://${ROS_HOME}/camera_info/${NAME}.yaml
  	To use your own fill this arg with the corresponding url, e.g.:
  	"file:///$(find your_camera_package)/config/your_camera.yaml" -->
    <arg name="camera_info_url1" default="" />
  	<!-- flip the image horizontally (mirror it) -->
  	<arg name="flip_horizontal1" default="false" />
  	<!-- flip the image vertically -->
  	<arg name="flip_vertical1" default="false" />
    <!-- force width and height, 0 means no forcing -->
    <arg name="width1" default="0"/>
    <arg name="height1" default="0"/>
  	<!-- if show a image_view window subscribed to the generated stream -->
	<arg name="visualize1" default="false"/>

  	<!-- Camera 2 Settings -->
  	<arg name="camera_name2" default="camera2" />
  	<!-- video_stream_provider can be a number as a video device or a url of a video stream -->
  	<arg name="video_stream_provider2" default="1" />
  	<!-- frames per second to query the camera for -->
  	<arg name="fps2" default="30" />
  	<!-- frame_id for the camera -->
  	<arg name="frame_id2" default="$(arg camera_name2)" />
  	<!-- By default, calibrations are stored to file://${ROS_HOME}/camera_info/${NAME}.yaml
  	To use your own fill this arg with the corresponding url, e.g.:
  	"file:///$(find your_camera_package)/config/your_camera.yaml" -->
    <arg name="camera_info_url2" default="" />
  	<!-- flip the image horizontally (mirror it) -->
  	<arg name="flip_horizontal2" default="false" />
  	<!-- flip the image vertically -->
  	<arg name="flip_vertical2" default="false" />
    <!-- force width and height, 0 means no forcing -->
    <arg name="width2" default="0"/>
    <arg name="height2" default="0"/>
  	<!-- if show a image_view window subscribed to the generated stream -->
	<arg name="visualize2" default="false"/>



   
   	<!-- images will be published at /camera_name1/image with the image transports plugins (e.g.: compressed) installed -->
   	<group ns="$(arg camera_name1)">
	    <node pkg="video_stream_opencv" type="video_stream" name="$(arg camera_name1)_stream" output="screen"> 
	    	<remap from="camera" to="image_raw" />
	    	<param name="camera_name" type="string" value="$(arg camera_name1)" />
	        <param name="video_stream_provider" type="string" value="$(arg video_stream_provider1)" />
	        <param name="fps" type="int" value="$(arg fps1)" />
	        <param name="frame_id" type="string" value="$(arg frame_id1)" />
	        <param name="camera_info_url" type="string" value="$(arg camera_info_url1)" />
	        <param name="flip_horizontal" type="bool" value="$(arg flip_horizontal1)" />
	        <param name="flip_vertical" type="bool" value="$(arg flip_vertical1)" />
	        <param name="width" type="int" value="$(arg width1)" />
	        <param name="height" type="int" value="$(arg height1)" />
	    </node>
	</group>

   	<!-- images will be published at /camera_name2/image with the image transports plugins (e.g.: compressed) installed -->
   	<group ns="$(arg camera_name2)">
	    <node pkg="video_stream_opencv" type="video_stream" name="$(arg camera_name2)_stream" output="screen"> 
	    	<remap from="camera" to="image_raw" />
	    	<param name="camera_name" type="string" value="$(arg camera_name2)" />
	        <param name="video_stream_provider" type="string" value="$(arg video_stream_provider2)" />
	        <param name="fps" type="int" value="$(arg fps2)" />
	        <param name="frame_id" type="string" value="$(arg frame_id1)" />
	        <param name="camera_info_url" type="string" value="$(arg camera_info_url2)" />
	        <param name="flip_horizontal" type="bool" value="$(arg flip_horizontal2)" />
	        <param name="flip_vertical" type="bool" value="$(arg flip_vertical2)" />
	        <param name="width" type="int" value="$(arg width2)" />
	        <param name="height" type="int" value="$(arg height2)" />
	    </node>
	</group>

</launch>
